// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

// prisma.schema

model Animal {
  id   String @id @unique @default(uuid()) @db.Uuid
  name String @unique
  fact String
}

model User {
  id               Int          @id @default(autoincrement())
  email            String       @default("null")
  name             String
  password         String?
  isVerified       Boolean      @default(false)
  providerId       String       @default("")
  registrationType String       @default("emailpassword")
  isBlocked        Boolean      @default(false)
  fcmToken         String       @default("")
  createdAt        DateTime     @default(now())
  FlagReport       FlagReport[]
}

model Token {
  id        Int      @id @default(autoincrement())
  userId    Int?     @unique
  token     String   @default("")
  createdAt DateTime @default(now())
}

model Category {
  id              Int      @id @default(autoincrement())
  Image           String?
  Title           String?
  Description     String?
  BackgroundColor String?
  createdAt       DateTime @default(now())
  Report          Report[]
}

model Report {
  id           Int      @id @default(autoincrement())
  Category     Category @relation(fields: [CategoryId], references: [id])
  CategoryId   Int
  SubCategory  Int?
  userId       Int
  latitude     Float
  longitude    Float
  IncidentDate DateTime @default(now())
  SuspectName  String
  CostMoney    Int
  floor        Int?     @default(0)
  Description  String
  createdAt    DateTime @default(now())
  IncidentTime String?  @default("00:00")
}

model News {
  id           Int         @id @default(autoincrement())
  Image        String?
  Title        String?
  Tagline      String?
  Description  String?
  CategoryId   Int?
  createdAt    DateTime    @default(now())
  favorites    Favorites[]
  CategoryName String?
}

model Favorites {
  id        Int      @id @default(autoincrement())
  userId    Int?
  newsId    Int
  News      News?    @relation(fields: [newsId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model FlagReason {
  id        Int      @id @default(autoincrement())
  reason    String
  createdAt DateTime @default(now())
}

model FlagReport {
  id        Int      @id @default(autoincrement())
  userId    Int
  reasonId  Int
  reason    String
  User      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}
